#!/usr/bin/python
# -*- coding: UTF-8 -*-
#
#########################################################
# Name: audiomass (main script)
# Porpose:  Boot straps for audiomass script
# Writer: Gianluca Pernigoto <jeanlucperni@gmail.com>
# Copyright: (c) 2015/2016 Gianluca Pernigoto <jeanlucperni@gmail.com>
# license: GPL3
# Version: (Ver.0.6) Febbruary 2015
# Rev
#########################################################

import sys
import os
from admspack.datastrings import info
from admspack.process_file import file_parser
from admspack.process_dir import  dir_parser
from admspack.process_batch import batch_parser

cr = info()
AUTHOR = cr[0]
MAIL = cr[1]
COPYRIGHT = cr[2]
VERSION = cr[3]
RELEASE = cr[4]
RLS_NAME = cr[5]# release name first letter is Uppercase
PRG_NAME = cr[6]
URL = cr[7]
DECRIPTION = cr[8]
LONG_DESRIPTION = cr[9]
LONG_HELP = cr[10]
LICENSE = cr[11]# long_license
TRY = cr[13]

Warnings = 'audiomass:\033[1m Warning!\033[0m'
errors = 'audiomass:\033[31;1m Error!\033[0m'
file_access = "%s Unable to access, invalid file-name  >\033[0m" % Warnings
dir_access = "%s Unable to access, Invalid dir-name  >\033[0m" % errors


print ("\n\033[1m    %s\033[0m - front-end wrapper audio "
                            "converter -\n" % (RLS_NAME))

def main():
  """
  Boot straps
  """
  if '-f' in sys.argv or '--file' in sys.argv: 
      get_file()
      
  elif '-d' in sys.argv or '--dir' in sys.argv:
      get_dir()
      
  elif '-b' in sys.argv or '--batch' in sys.argv:
      get_batch()
      
  elif '-v' in sys.argv or '--version' in sys.argv:
    print "%s - %s" % (VERSION, RELEASE) 
    return
      
  elif '-h' in sys.argv or '--help' in sys.argv:
    print LONG_HELP
    return
      
  elif '-c' in sys.argv or '--copying' in sys.argv:
    print LICENSE
    return
  
  else:
    sys.exit("%s Missing options\n%s" % (errors, TRY))
  
  return 0


def get_file():
    """
    Get the input format, file name and output dir if
    in argument
    """
    try:
      if os.path.isfile(sys.argv[2]): # must be file only here
        path_in = sys.argv[2] # is a file-name
      else:
        sys.exit("%s %s" % (file_access, sys.argv[2]))
    except IndexError:
      sys.exit("%s Missing argument\n%s" % (errors,TRY))

    if len(sys.argv) == 4 or len(sys.argv) >= 4:
        if sys.argv[3] != '-o':
            sys.exit("%s Invalid option: '%s' \n%s"% (errors,
                                                      sys.argv[3], TRY))
        if len(sys.argv) >= 5:
            if os.path.isdir(sys.argv[4]):
                path_out = sys.argv[4] # this is a dir-name (if not empty)
            else:
                sys.exit("%s %s"%(dir_access ,sys.argv[4]))
        else:
            sys.exit("%s Missing output path name after '-o' option..\n%s" % (
                                                                errors,TRY))
    else:
        path_out = None
    # input_format is the extension format of path_in
    input_format = os.path.splitext(path_in)[1].replace(".","")
    file_parser(input_format, path_in, path_out)


def get_dir():
    """
    Get input dirname and output dirname if in argument
    """
    try:
      if os.path.isdir(sys.argv[2]): 
        path_in = sys.argv[2] # this is a dir-name (if not empty)
      else:
        sys.exit("%s %s"%(dir_access ,sys.argv[2]))
    except IndexError:
        sys.exit("%s Missing argument\n%s" % (errors,TRY))
        
    if len(sys.argv) == 4 or len(sys.argv) >= 4:
        if sys.argv[3] != '-o':
            sys.exit("%s Invalid option: '%s' \n%s"% (errors,
                                                      sys.argv[3], TRY))
        if len(sys.argv) >= 5:
            if os.path.isdir(sys.argv[4]):
                path_out = sys.argv[4] # this is a dir-name (if not empty)
            else:
                sys.exit("%s %s"%(dir_access ,sys.argv[4]))
        else:
            sys.exit("%s Missing output path name after '-o' option.\n%s" % (
                                                                errors,TRY))
    else:
        path_out = None
    dir_parser(path_in, path_out)


def get_batch():
    """
    Put a empty or existance queue of files in list 
    """
    f_list = []
    notFile = []

    for f in sys.argv[2:]:# itero dal 2Â° arg. lista
      if os.path.isfile(f): # must be file only here
        f_list.append(f)
      else:
        notFile.append(f)
        print "%s %s" % (file_access, f)
    batch_parser(f_list)


if __name__ == '__main__':
    status = main()
    sys.exit(status)
