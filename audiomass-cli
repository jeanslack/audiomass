#!/usr/bin/python
# -*- coding: UTF-8 -*-
#
#########################################################
# Name: audiomass (main script)
# Porpose:  Boot straps for audiomass script
# Writer: Gianluca Pernigoto <jeanlucperni@gmail.com>
# Copyright: (c) 2015/2017 Gianluca Pernigoto <jeanlucperni@gmail.com>
# license: GPL3
# Version: (Ver.0.7) December 2017
# Rev 3
#########################################################

import sys
import os
from admspack.datastrings import info
from admspack.process_file import file_parser
from admspack.process_dir import  dir_parser
from admspack.process_batch import batch_parser

cr = info()
AUTHOR = cr[0]
MAIL = cr[1]
COPYRIGHT = cr[2]
VERSION = cr[3]
RELEASE = cr[4]
RLS_NAME = cr[5]# release name first letter is Uppercase
PRG_NAME = cr[6]
URL = cr[7]
DECRIPTION = cr[8]
LONG_DESRIPTION = cr[9]
LONG_HELP = cr[10]
LICENSE = cr[11]# long_license
TRY = cr[13]

warnings = 'audiomass: \033[33;7;3mWarning!\033[0m'
errors = 'audiomass: \033[31;7;3mError!\033[0m'
file_access = "%s Unable to access, invalid file-name  >\033[0m" % errors
dir_access = "%s Unable to access, Invalid dir-name  >\033[0m" % errors

print ("\n\033[1m    %s\033[0m - wrapper audio conversions interface -"
                            "\n" % (RLS_NAME))
def main():
    """
    Boot straps
    """
    if '-f' in sys.argv or '--file' in sys.argv: 
        get_file()
    elif '-d' in sys.argv or '--dir' in sys.argv:
        get_dir()
    elif '-b' in sys.argv or '--batch' in sys.argv:
        get_batch()
    elif '-v' in sys.argv or '--version' in sys.argv:
        print "%s - %s - Released %s" % (RLS_NAME, VERSION, RELEASE) 
    elif '-h' in sys.argv or '--help' in sys.argv:
        print LONG_HELP
    elif '-c' in sys.argv or '--copying' in sys.argv:
        print LICENSE
    elif len(sys.argv) == 1:
        print LICENSE, LONG_HELP
    else:
        sys.exit("%s Invalid options: '%s' \n%s" % (errors,
                                            sys.argv[1:][0], TRY))
    return 0

def get_file():
    """
    Get the filename and output dirname if output dirname in argument
    """
    opts = [x for x in ['-o','--output'] if x in sys.argv]
    try:
      if os.path.isfile(sys.argv[2]): # must be file only here
        path_in = sys.argv[2] # is a file-name
      else:
        sys.exit("%s %s" % (file_access, sys.argv[2]))
    except IndexError:
      sys.exit("%s Missing argument after '%s' option.\n%s" % (errors,
                                                    sys.argv[1],TRY))
    if len(sys.argv) == 4 or len(sys.argv) >= 4:
        #if sys.argv[3] != '-o':
        if sys.argv[3] not in opts:
            sys.exit("%s Invalid option: '%s' \n%s"% (errors,
                                                      sys.argv[3], TRY))
        if len(sys.argv) >= 5:
            if os.path.isdir(sys.argv[4]):
                path_out = sys.argv[4] # this is a dir-name (if not empty)
            else:
                sys.exit("%s %s"%(dir_access ,sys.argv[4]))
        else:
            sys.exit("%s Missing output dir-name after '%s' option.\n%s" % (
                                                        errors, opts[0],TRY))
    else:
        path_out = None
    # input_format is the extension format of path_in
    input_format = os.path.splitext(path_in)[1].replace(".","")
    file_parser(input_format, path_in, path_out)

def get_dir():
    """
    Get input dirname and output dirname if output dirname in argument
    """
    opts = [x for x in ['-o','--output'] if x in sys.argv]
    try:
      if os.path.isdir(sys.argv[2]): 
        path_in = sys.argv[2] # this is a dir-name (if not empty)
      else:
        sys.exit("%s %s"%(dir_access ,sys.argv[2]))
    except IndexError:
        sys.exit("%s Missing argument\n%s" % (errors,TRY))
    if len(sys.argv) == 4 or len(sys.argv) >= 4:
        if sys.argv[3] not in opts:
            sys.exit("%s Invalid option: '%s' \n%s"% (errors,
                                                      sys.argv[3], TRY))
        if len(sys.argv) >= 5:
            if os.path.isdir(sys.argv[4]):
                path_out = sys.argv[4] # this is a dir-name (if not empty)
            else:
                sys.exit("%s %s"%(dir_access ,sys.argv[4]))
        else:
            sys.exit("%s Missing output dir-name after '%s' option.\n%s" % (
                                                        errors, opts[0],TRY))
    else:
        path_out = None
    dir_parser(path_in, path_out)

def get_batch():
    """
    Put a queue stream in list and pass with the output dir if
    in argument
    """
    queue = []
    opts = [x for x in ['-o','--output'] if x in sys.argv]
    if opts:
        opt = sys.argv.index(opts[0])
        try:
            if sys.argv[opt +1]: # se trovo percorso dopo l'opzione -o --output
                path_O = sys.argv[opt +1]
        except IndexError:
            sys.exit( "%s Missing argument after '%s' option.\n%s" % (
                                                        errors, opts[0], TRY))
        else:
            if os.path.isdir(path_O):#trovo opzione e percorso output corretti
                arg = sys.argv[2:] # lista di passaggio per codice successivo
                arg.remove(opts[0])
                arg.remove(path_O)
            else:
                sys.exit("%s %s"%(dir_access ,path_O))
    else:
        path_O = None
        arg = sys.argv[2:] # dal 2Â° arg. lista

    for f in arg:
      if os.path.isfile(f): # must be file only here
        queue.append(f) 
      else:
        print "%s %s" % (file_access, f)
        
    batch_parser(queue, path_O)

if __name__ == '__main__':
    status = main()
    sys.exit(status)
